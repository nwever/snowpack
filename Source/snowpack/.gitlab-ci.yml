default:
  image: gcc # official gcc image, based on debian, see https://hub.docker.com/_/gcc/
  tags: ['docker']
  before_script:
  - apt-get update && apt-get -y install cmake

stages:
  - dependency build
  - build
  - test
  - test coverage
  - release build
  - release
  - pages

build meteoio:
  stage: dependency build
  script:
    - git clone -b master https://gitlabext.wsl.ch/snow-models/meteoio.git
    - cd meteoio
    - echo "Building from commit $(git rev-parse HEAD)"
    - cmake -S . -B . -D DEST:STRING=safe -D VERSION_FROM_GIT:BOOL=ON -D BUILD_TESTING:BOOL=OFF
      -D USE_LTO_OPTIMIZATIONS:BOOL=ON -D INSTALL_DOC:BOOL=OFF -D CPACK_BUNDLE_ALL:BOOL=ON -D CPACK_GENERATOR:STRING="DEB"
    - make -j 2
    - cpack
  artifacts:
    expire_in: 1h
    paths:
      - ./meteoio/*.deb

build:
  stage: build
  script:
    # Install meteoio
    - METEO_IO_DEB=$(find ./meteoio -maxdepth 1 -type f -name "MeteoIO-*.deb")
    - dpkg -i $METEO_IO_DEB
    # Build snowpack
    - mkdir build && cd build
    - cmake -S .. -B . -D DEST:STRING=safe -D VERSION_FROM_GIT:BOOL=ON -D BUILD_TESTING:BOOL=ON
      -D BUILD_TESTING_WITH_COVERAGE:BOOL=ON -D CPACK_BUNDLE_ALL:BOOL=ON
      -D METEOIO_INCLUDE_DIR=/usr/include -D METEOIO_LIBRARY=/usr/lib/libmeteoio.so
    - make -j 2
    # Cleanup to avoid limits in GitLab
    - find . -name "*.o" -type f -delete
  artifacts:
    expire_in: 1h
    paths:
      - build
      - lib

.test_base:
  stage: test
  script:
    - apt-get -y install numdiff
    # Install meteoio
    - METEO_IO_DEB=$(find ./meteoio -maxdepth 1 -type f -name "MeteoIO-*.deb")
    - dpkg -i $METEO_IO_DEB
    # Run tests and coverage
    - cp -r tests build # copy the required test files into the tests folder
    - cd build
    - ctest --verbose -R "^${TEST_NAME}$"

res1exp:
  extends: .test_base
  variables:
    TEST_NAME: res1exp.smoke

res5exp:
  extends: .test_base
  variables:
    TEST_NAME: res5exp.smoke

basics_1exp:
  extends: .test_base
  variables:
    TEST_NAME: basics_1exp.smoke

basics_5exp_N:
  extends: .test_base
  variables:
    TEST_NAME: basics_5exp_N.smoke

basics_5exp_S:
  extends: .test_base
  variables:
    TEST_NAME: basics_5exp_S.smoke

massbalance_check_simple:
  extends: .test_base
  variables:
    TEST_NAME: massbalance_check_simple.smoke

energybalance_check_simple:
  extends: .test_base
  variables:
    TEST_NAME: energybalance_check_simple.smoke

linearsolver:
  extends: .test_base
  variables:
    TEST_NAME: linearsolver.smoke

implicitsolver:
  extends: .test_base
  variables:
    TEST_NAME: implicitsolver.smoke

running times and coverage:
  stage: test coverage
  script:
    - apt-get -y install numdiff
    # Install meteoio
    - METEO_IO_DEB=$(find ./meteoio -maxdepth 1 -type f -name "MeteoIO-*.deb")
    - dpkg -i $METEO_IO_DEB
    # Run tests and coverage
    - cp -r tests build # copy the required test files into the tests folder
    - cd build
    - ctest && ctest -D NightlyCoverage

Debian release build:
  stage: release build
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually
  dependencies: []
  script:
    - apt-get -y install doxygen graphviz jq # both doxygen and graphviz are required for cmake "FindDoxygen"
    # Download newest meteoio release
    - 'JSON_RESPONSE=$(curl "https://gitlabext.wsl.ch/api/v4/projects/30/releases" --header "JOB-TOKEN: $CI_JOB_TOKEN")'
    - 'echo "MeteoIO Releases: ${JSON_RESPONSE}"'
    - RELEASE_URL=$(echo $JSON_RESPONSE | jq -r '.[0].assets.links[] | select(.name|test("debian deb";"i")) | .url')
    - 'echo "MeteoIO Release URL: ${RELEASE_URL}"'
    - 'curl ${RELEASE_URL} --output meteoio.deb'
    - dpkg -i meteoio.deb
    # Build snowpack
    - export SNOWPACK_VERSION=${CI_COMMIT_TAG#*-}
    - export VERSION_MAJOR=`echo $SNOWPACK_VERSION | cut -d. -f1`
    - export VERSION_MINOR=`echo $SNOWPACK_VERSION | cut -d. -f2`
    - export VERSION_PATCH=`echo $SNOWPACK_VERSION | cut -d. -f3`
    - echo VERSION_MAJOR=$VERSION_MAJOR - VERSION_MINOR=$VERSION_MINOR - VERSION_PATCH=$VERSION_PATCH
    - cmake -S . -B . -D DEST:STRING=safe -D VERSION_FROM_GIT:BOOL=OFF -D BUILD_TESTING:BOOL=OFF
      -D INSTALL_DOC:BOOL=ON -D CPACK_BUNDLE_ALL:BOOL=ON -D CPACK_GENERATOR:STRING="DEB;TGZ"
      -D METEOIO_INCLUDE_DIR=/usr/include -D METEOIO_LIBRARY=/usr/lib/libmeteoio.so
    - make -j 2
    - make doc
    - cpack
    # Documentation only package
    - mv doc Snowpack-${SNOWPACK_VERSION}-doc
    - tar -czvf Snowpack-${SNOWPACK_VERSION}-doc.tar.gz Snowpack-${SNOWPACK_VERSION}-doc
  artifacts:
    expire_in: 1h
    paths:
      - Snowpack-*-x86_64.tar.gz
      - Snowpack-*-x86_64.deb
      - Snowpack-*-doc.tar.gz

Fedora release build:
  stage: release build
  image: fedora
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually
  dependencies: []
  before_script:
    - yum -y install make gcc g++ cmake doxygen graphviz rpm-build jq
  script:
    # Download newest meteoio release
    - 'JSON_RESPONSE=$(curl "https://gitlabext.wsl.ch/api/v4/projects/30/releases" --header "JOB-TOKEN: $CI_JOB_TOKEN")'
    - 'echo "MeteoIO Releases: ${JSON_RESPONSE}"'
    - RELEASE_URL=$(echo $JSON_RESPONSE | jq -r '.[0].assets.links[] | select(.name|test("fedora rpm";"i")) | .url')
    - 'echo "MeteoIO Release URL: ${RELEASE_URL}"'
    - 'curl ${RELEASE_URL} --output meteoio.rpm'
    - rpm -i meteoio.rpm
    # Build snowpack
    - echo "%__os_install_post %{nil}" > ~/.rpmmacros # Turn off binary stripping for rpm
    - export SNOWPACK_VERSION=${CI_COMMIT_TAG#*-}
    - export VERSION_MAJOR=`echo $SNOWPACK_VERSION | cut -d. -f1`
    - export VERSION_MINOR=`echo $SNOWPACK_VERSION | cut -d. -f2`
    - export VERSION_PATCH=`echo $SNOWPACK_VERSION | cut -d. -f3`
    - echo VERSION_MAJOR=$VERSION_MAJOR - VERSION_MINOR=$VERSION_MINOR - VERSION_PATCH=$VERSION_PATCH
    - cmake -S . -B . -D DEST:STRING=safe -D VERSION_FROM_GIT:BOOL=OFF -D BUILD_TESTING:BOOL=OFF
      -D INSTALL_DOC:BOOL=ON -D CPACK_BUNDLE_ALL:BOOL=ON -D CPACK_GENERATOR:STRING="RPM" -D USE_RPATH:BOOL=OFF
      -D METEOIO_INCLUDE_DIR=/usr/include -D METEOIO_LIBRARY=/usr/lib/libmeteoio.so
    - make -j 2
    - make doc
    - cpack
  artifacts:
    expire_in: 1h
    paths:
      - Snowpack-*-x86_64.rpm

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  before_script: # overrides global before_script
    - apk add --no-cache curl
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually
  dependencies:
    - Debian release build
    - Fedora release build
  script:
    - export SNOWPACK_VERSION=${CI_COMMIT_TAG#*-}
    - echo "Uploading Snowpack-${SNOWPACK_VERSION} packages to
      ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/snowpack/${SNOWPACK_VERSION}/Snowpack-${SNOWPACK_VERSION}-*"
    - 'curl -i --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file Snowpack-${SNOWPACK_VERSION}-x86_64.tar.gz
      "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/snowpack/${SNOWPACK_VERSION}/Snowpack-${SNOWPACK_VERSION}-x86_64.tar.gz"'
    - 'curl -i --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file Snowpack-${SNOWPACK_VERSION}-x86_64.rpm
      "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/snowpack/${SNOWPACK_VERSION}/Snowpack-${SNOWPACK_VERSION}-x86_64.rpm"'
    - 'curl -i --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file Snowpack-${SNOWPACK_VERSION}-x86_64.deb
      "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/snowpack/${SNOWPACK_VERSION}/Snowpack-${SNOWPACK_VERSION}-x86_64.deb"'
    - 'curl -i --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file Snowpack-${SNOWPACK_VERSION}-doc.tar.gz
      "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/snowpack/${SNOWPACK_VERSION}/Snowpack-${SNOWPACK_VERSION}-doc.tar.gz"'
  release:
    name: 'Release $CI_COMMIT_TAG'
    description: 'Created using GitLab CI/CD'
    tag_name: '$CI_COMMIT_TAG'
    ref: '$CI_COMMIT_TAG'
    assets:
      links:
        - name: 'Linux Debian binary tarball'
          url: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/snowpack/${CI_COMMIT_TAG#*-}/Snowpack-${CI_COMMIT_TAG#*-}-x86_64.tar.gz'
          link_type: 'other'
        - name: 'Linux Fedora RPM binary package'
          url: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/snowpack/${CI_COMMIT_TAG#*-}/Snowpack-${CI_COMMIT_TAG#*-}-x86_64.rpm'
          link_type: 'package'
        - name: 'Linux Debian DEB binary package'
          url: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/snowpack/${CI_COMMIT_TAG#*-}/Snowpack-${CI_COMMIT_TAG#*-}-x86_64.deb'
          link_type: 'package'
        - name: 'Documentation only package'
          url: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/snowpack/${CI_COMMIT_TAG#*-}/Snowpack-${CI_COMMIT_TAG#*-}-doc.tar.gz'
          link_type: 'other'

update pages:
  stage: pages
  before_script: [] # overrides global before_script
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually
  script:
    - curl --request POST
     --form token=${CI_JOB_TOKEN}
     --form ref=main
     "https://gitlabext.wsl.ch/api/v4/projects/175/trigger/pipeline"
